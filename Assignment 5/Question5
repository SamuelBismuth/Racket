#lang pl

#| BNF for the ROL language:

<ROL> ::= {reg-len = <num> <RegE> }
<RegE> ::= <Bits>       
	   | {and <RegE> <RegE>}        
	   | {or <RegE> <RegE>}        
	   | {shl <RegE>}        
	   | {with {<ID> <RegE>} <RegE> }          
	   | {<ID>}
           | {<BOOL>}
           | {if <RegE> <RegE> <RegE>}
           | {geq? <RegE> <RegE>}
           | {maj? <RegE>}
<Bits> ::= <bit> | <bit> <Bits>
<bit>::= 1 | 0×“
|#


;; Defining two new types
(define-type BIT = (U 0 1))
(define-type Bit-List = (Listof BIT))


;; RegE abstract syntax trees
(define-type RegE
  [Reg Bit-List]
  [And RegE RegE]
  [Or RegE RegE]
  [Shl RegE]
  [IdFROL Symbol]
  [WithFROL Symbol RegE RegE]
  [Bool Boolean]
  [Geq RegE RegE]
  [Maj RegE]
  [If RegE RegE RegE]
  [FunFROL Symbol RegE]
  [CallFROL RegE RegE])


(define-type ENV
  [EmptyEnv]
  [Extend Symbol RES ENV])

(define-type RES
  [RegV Bit-List]
  [MyBool Boolean]
  [MyFun Symbol RegE ENV])


(: lookup : Symbol ENV -> RES)
(define (lookup name env)
  (cases env
    [(EmptyEnv) (error 'lookup "no binding for ~s" name)]
    [(Extend id val rest-env)
     (if (eq? id name) val (lookup name rest-env))]))

(: parse-sexprFROL : Sexpr -> RegE)
;; to convert the main s-expression into ROL
(define (parse-sexprFROL sexpr)
  (match sexpr
    [(list 'reg-len = (number: n) args)
     (if (> n 0) ;; remember to make sure specified register length is at least 1
         (parse-sexpr-RegL args n)
         (error 'parse-sexprFROL "Register length must be at least 1 ~s" sexpr) )]
    [else (error 'parse-sexprFROL "bad syntax in ~s" sexpr)]))

(: parse-sexpr-RegL : Sexpr Number -> RegE)
;; to convert s-expressions into RegEs
(define (parse-sexpr-RegL sexpr reg-len)
  (match sexpr
    ['true (Bool #t)]
    ['false (Bool #f)]
    [(list (and a (or 1 0)) ... ) (if (= reg-len (length a))
                                      (Reg (list->bit-list a))
                                      (error 'parse-sexpr-RegE "wrong number of bits in ~s" a))] ;; from the slides (changing the given code).
    [(list 'and list1 list2) (And (parse-sexpr-RegL list1 reg-len) (parse-sexpr-RegL list2 reg-len))]
    [(list 'or list1 list2) (Or (parse-sexpr-RegL list1 reg-len) (parse-sexpr-RegL list2 reg-len))]
    [(list 'shl list) (Shl (parse-sexpr-RegL list reg-len))]
    [(symbol: id-name) (IdFROL id-name)]  
    [(cons 'with args)
     (match sexpr
       [(list 'with (list (symbol: oldName) newName) body)
        (WithFROL oldName (parse-sexpr-RegL newName reg-len) (parse-sexpr-RegL body reg-len))]
       [else (error 'parse-sexpr-RegE "bad `with' syntax in ~s" sexpr)])]
    [(list 'geq? list1 list2) (Geq (parse-sexpr-RegL list1 reg-len) (parse-sexpr-RegL list2 reg-len))]
    [(list 'maj? list) (Maj (parse-sexpr-RegL list reg-len))]
    [(list 'if list1 list2 list3) (If (parse-sexpr-RegL list1 reg-len) (parse-sexpr-RegL list2 reg-len) (parse-sexpr-RegL list3 reg-len))]
    [(list 'call fun arg) (CallFROL (parse-sexpr-RegL fun reg-len) (parse-sexpr-RegL arg reg-len))]
    [(cons 'fun more)
     (match sexpr
       [(list 'fun (list (symbol: name)) body)
        (FunFROL name (parse-sexpr-RegL body reg-len))]
       [else (error 'parse-sexprFROL "bad `fun' syntax in ~s" sexpr)])]
    [else (error 'parse-sexprFROL "bad syntax in ~s" sexpr)]))


(: parseFROL : String -> RegE)
;; parses a string containing a RegE expression to a RegE AST
(define (parseFROL str)
  (parse-sexprFROL (string->sexpr str)))


(: evalFROL : RegE ENV -> RES)
;; evaluates RegE expressions by reducing them to bit-lists
(define (evalFROL expr env)
  (cases expr
    [(Reg reg) (RegV reg)]
    [(Bool bl) (MyBool bl)]
    [(And list1 list2) (reg-arith-op bit-and (evalFROL list1 env) (evalFROL list2 env))]
    [(Or list1 list2) (reg-arith-op bit-or (evalFROL list1 env) (evalFROL list2 env))]
    [(Shl list) (RegV (shift-left (RegV->bit-list (evalFROL list env))))]
    [(WithFROL bound-id named-expr bound-body)
     (evalFROL bound-body (Extend bound-id (evalFROL named-expr env) env))]    
    [(If E1 E2 E3) (if (cases (evalFROL E1 env)
                         [(MyBool myBool) myBool]
                         [else #t]) (evalFROL E2 env) (evalFROL E3 env))]
    [(Maj list1) (MyBool (majority? (RegV->bit-list (evalFROL list1 env))))]
    [(Geq list1 list2) (MyBool (geq-bitlists? (RegV->bit-list (evalFROL list1 env)) (RegV->bit-list (evalFROL list2 env))))]
    [(IdFROL name) (lookup name env)]
    [(FunFROL bound-id bound-body) (MyFun bound-id bound-body env)]
    [(CallFROL fun-expr arg-expr)
     (let ([fval (evalFROL fun-expr env)])
       (cases fval
         [(MyFun bound-id bound-body f-env)
          (evalFROL bound-body
                    (Extend bound-id (evalFROL arg-expr env) f-env))]
         [else (error 'evalFROL "`call' expects a function, got: ~s"
                      fval)]))]
    ))


;; Next is a technical function that converts (casts)
;; (any) list into a bit-list. We use it in parse-sexpr.
(: list->bit-list : (Listof Any) -> Bit-List)
;; to cast a list of bits as a bit-list
(define (list->bit-list lst)
  (cond [(null? lst) null]
        [(eq? (first lst) 1)(cons 1 (list->bit-list (rest lst)))]
        [else (cons 0 (list->bit-list (rest lst)))]))(: parse-sexprFROL : Sexpr -> RegE)


;; Defining functions for dealing with arithmetic operations
;; on the above types
(: bit-and : BIT BIT -> BIT) ;; Arithmetic and
(define(bit-and a b)
  (cond
    [(eq? a 1) (if (eq? b 1) 1 0)]
    [else 0])) ;; not used actually.


(: bit-or : BIT BIT -> BIT) ;; Aithmetic or
(define(bit-or a b)
  (cond
    [(eq? a 0) (if (eq? b 0) 0 1)]
    [else 1])) ;; not used actually.


(: reg-arith-op : (BIT BIT -> BIT) RES RES -> RES)
;; Consumes two registers and some binary bit operation 'op',
;; and returns the register obtained by applying op on the
;; i'th bit of both registers for all i.
(define(reg-arith-op op reg1 reg2)
  (: bit-arith-op : Bit-List Bit-List -> Bit-List)
  ;; Consumes two bit-lists and uses the binary bit operation 'op'.
  ;; It returns the bit-list obtained by applying op on the
  ;; i'th bit of both registers for all i.
  (define(bit-arith-op bl1 bl2)
    (map op bl1 bl2))
  (RegV (bit-arith-op (RegV->bit-list reg1) (RegV->bit-list reg2))))


(: majority? : Bit-List -> Boolean)
;; Consumes a list of bits and checks whether the
;; number of 1's are at least as the number of 0's. 
(define(majority? bl)
  (if (>= (foldl + 0 bl) (/ (length bl) 2)) #t #f))


(: geq-bitlists? : Bit-List Bit-List -> Boolean)
;; Consumes two bit-lists and compares them. It returns true if the
;; first bit-list is larger or equal to the second.
(define (geq-bitlists? bl1 bl2)
  (cond
    [(null? bl1) #t]  ;; So is bl2.
    [(eq? (first bl1) 1) (if (eq? (first bl2) 1) (geq-bitlists? (rest bl1) (rest bl2)) #t)]
    [(eq? (first bl2) 1)  #f]
    [else (geq-bitlists? (rest bl1) (rest bl2))]))


(: shift-left : Bit-List -> Bit-List)
;; Shifts left a list of bits (once)
(define(shift-left bl)
  (append (rest bl) (list (first  bl))))


(: RegV->bit-list : RES -> Bit-List)
;; extract a bit-list from RES type
(define (RegV->bit-list res)
  (cases res
    [(RegV bl) bl]
    [else (error RegV->bit-list "run must return a bit-list")]))


(: runFROL : String -> Bit-List)
;; evaluate a ROL program contained in a string
;; we will not allow to return a boolean type
(: runFROL : String -> Bit-List)
(define (runFROL str)
  (RegV->bit-list (evalFROL(parseFROL str) (EmptyEnv))))


(test (runFROL "{ reg-len = 3 {with {identity {fun {x} x}} {with {foo {fun {x} {or x {1 1 0}}}} {call {call identity foo} {0 1 0}}}}}") => '(1 1 0))
(test (runFROL "{ reg-len = 3 {with {x {0 0 1}}{with {f {fun {y} {and x y}}} {with {x {0 0 0}} {call f {1 1 1}}}}}}") => '(0 0 1))
(test (runFROL "{ reg-len = 4 {with {foo {fun {z} {if {maj? z} z {shl z}}}} {call foo {if {maj? {0 0 1 1}} {shl {1 0 1 1}} {1 1 0 1}}}}}") => '(0 1 1 1))
(test (runFROL "{ reg-len = 4 {1 0 0 0}}") => '(1 0 0 0))
(test (runFROL "{ reg-len = 4 {shl {1 0 0 0}}}") => '(0 0 0 1))
(test (runFROL "{ reg-len = 4 {and {shl {1 0 1 0}}{shl {1 0 1 0}}}}") =>'(0 1 0 1))
(test (runFROL "{ reg-len = 4 {1 0 0 0}}") => '(1 0 0 0))
(test (runFROL "{ reg-len = 4 {shl {1 0 0 0}}}") => '(0 0 0 1))
(test (runFROL "{ reg-len = 4 {and {shl {1 0 1 0}}{shl {1 0 1 0}}}}") =>'(0 1 0 1))
(test (runFROL "{ reg-len = 2 {and {shl {1 0}} {1 0}}}") =>'(0 0))
(test (runFROL "{ reg-len = 2 {or {0 0} {1 0}}}") =>'(1 0))
(test (runFROL "{ reg-len = 2 {with {x { or {and {shl {1 0}}{1 0}}{1 0}}}{shl x}}}") => '(0 1))
(test (runFROL "{ reg-len = 4 {or {1 1 1 1} {0 1 1}}}") =error>"wrong number of bits in (0 1 1)")
(test (runFROL "{ reg-len = 0 {}}") =error>"Register length must be at least 1")
(test (runFROL "{ reg-len = 2 {if false {0 0} {1 1}}}") => '(1 1))
(test (runFROL "{ reg-len = 4 {if false {shl {1 0 1 1}} {shl {1 0 1 1}}}}") =>'(0 1 1 1))
(test (runFROL "{ reg-len = 4 {if {maj? {0 0 1 1}}{shl {1 0 1 1}}{1 1 0 1}}}")=> '(0 1 1 1))
(test (runFROL "{ reg-len = 4 {if false {shl {1 0 1 1}} {1 1 0 1}}}") => '(1 1 0 1))
(test (runFROL "{ reg-len = 4 {if true {shl {1 0 1 1}} {1 1 0 1}}}") => '(0 1 1 1))
(test (runFROL "{ reg-len = 4 {with {x buuuug bug}}}")=error> "parse-sexpr-RegE: bad `with' syntax in (with (x buuuug bug))")
(test (runFROL "{ reg-len = 2 {if {maj? {0 0}}{0 1} {0 1}}}") =>'(0 1))
(test (runFROL "{ reg-len = 2 {if {geq? {0 0}{1 1}}{0 1} {0 1}}}") =>'(0 1))
(test (runFROL "{ reg-len = 2 {with {x { or {and {or {1 0} {1 0}}{1 0}}{1 0}}}{or {0 1} {0 1}}}}") =>'(0 1))
(test (runFROL "{ reg-len = 2 {with {x { or {and {or {1 0} {1 0}}{1 0}}{1 0}}}{and {0 1} {0 1}}}}") =>'(0 1))
(test (runFROL "{ reg-len = 2 {with {x { or {and {or {1 0} {1 0}}{1 0}}{1 0}}}{if false {1 0} {0 1}}}}")=>'(0 1))
(test (runFROL "{ reg-len = 2 {with {x { or {and {or {1 0} {1 0}}{1 0}}{1 0}}}{with {x { or {and {or {1 0} {1 0}}{1 0}}{1 0}}}{if false {1 0} {0 1}}}}}")=>'(0 1))
(test (runFROL "{ reg-len = 2 {with {x { or {and {or {1 0} {1 0}}{1 0}}{1 0}}}{with {x {and {and {and {0 0} {0 0}}{1 0}}{1 0}}}{if true {1 0} {1 1}}}}}")=>'(1 0))
(test (runFROL "{ reg-len = 2 {if {geq? {0 0}{1 1}}{0 1} {0 1}}}") =>'(0 1))
(test (runFROL "{ reg-len = 2 {if {geq? {1 1}{0 0}}{0 1} {0 1}}}") =>'(0 1))
(test (runFROL "{ reg-len = 2 {if {geq? {1 0}{0 1}}{0 1} {0 1}}}") =>'(0 1))
(test (runFROL "{ reg-len = 1 {if {geq? {1}{1}}{1} {1}}}") =>'(1))
(test (runFROL "{ reg-len = 1 {if {geq? {0}{0}}{0} {0}}}") =>'(0))
(test (runFROL "{ reg-len = 1 {if {0} {0} {1}}}") =>'(0))