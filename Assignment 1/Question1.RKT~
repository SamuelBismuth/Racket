#lang pl

;; In this file are some simple functions, with documentation and tests for the assignment 1 of the course Programming Language.
;; For all the method, we try to use the strictest type possible for the returned type.


#|/////////////////////////////////////////////////////////////|#
#|QUESTION 1 -> about one hour (including tests and debugging).|#
#|/////////////////////////////////////////////////////////////|#

;; My solution for this question was to use a cond statement and to check all the string one by one.


;; Signature for the method plPrefixContained.
;; The arguments of the function are five string. And the return is Any type.
(: plPrefixContained : String String String String String -> Any)

#|
Method plPrefixContained:
-param: string1 string2 string3 string4 string5: five strings without any restriction.
-return: if one string contains "pl" at the beginning of the word, return the string, else return false.
-time of work: about thirty minutes.
-difficulties: use of the cond statement and understanding how the racket language (at his basic) works.
|#
(define (plPrefixContained string1 string2 string3 string4 string5)
  (cond
    [(and (> (string-length string1)  1) (string=? "pl" (substring string1 0 2))) string1]
    [(and (> (string-length string2)  1) (string=? "pl" (substring string2 0 2))) string2]
    [(and (> (string-length string3)  1) (string=? "pl" (substring string3 0 2))) string3]
    [(and (> (string-length string4)  1) (string=? "pl" (substring string4 0 2))) string4]
    [(and (> (string-length string5)  1) (string=? "pl" (substring string5 0 2))) string5]
    [else #f]
    )
  )

;; 6 TESTS CASES
(test (plPrefixContained "yypl" "opl" "lpTT" "lpl" "lol") => false)
(test (plPrefixContained "" "" "" "" "") => false)
(test (plPrefixContained "pl" "pl" "pl" "pl" "pl") => "pl")
(test (plPrefixContained "plplplplplp" "plplplplplp" "plplplplplp" "plplplplplp" "plplplplplp") => "plplplplplp")
(test (plPrefixContained "yypl" "opl" "lpTT" "lpl" "pl") => "pl")
(test (plPrefixContained "yypl" "opl" "plot" "lpl" "lol") => "plot")


#|///////////////////////////////////////////////////////////////|#
#|QUESTION 2A -> about two hours (including tests and debugging).|#
#|///////////////////////////////////////////////////////////////|#

;; My solution for this question was to use a tail-recursion and an helper method.
;; The main goal is to send one by one all the element of the list and store the longer string into the variable old string.
;; The variable oldString is initialized as false and may stay false all the running if there is no string in the list.
;; At the end of the running, return the best between the oldString and the last newString.


;; Signature for the method longestString.
;; The argument of the function is a list of any type. And the return is Any type.
(: longestString : (Listof Any) -> Any)

#|
Method longestString:
-param: list of any: a sentence of any type.
-return: the longest string of the list -> if there is no string on the list: return false.
-time of work: about one hour and half.
-difficulties: Use of the tail-recursion and define type.
|#
(define (longestString myList)
  
  ;; Signature for the method assignString.
  ;; The argument of the function is a list of any type and two Any types. And the return is Any type.
  (: assignString : (Listof Any) Any Any -> Any)

  ;;Local method assignString:
  ;;-param: list of any: a sentence of any type, oldString: the best actual string (may be false), newString: the newString we need to test.
  ;;-return: oldString if nothing changed, or newString, if the newString is longer that the old one.
  (define (assignString myList oldString newString)
    (set! oldString (nextString oldString newString))
    (cond
      [(null? myList) (if(eq? oldString #f) #f oldString)]
      [else
       (assignString (rest myList)
                     oldString
                     (first myList)
                     )
       ]
      )   
    )
  (if (eq? myList '()) #f (assignString myList #f (first myList)))
  )

;; Signature for the method nextString.
;; The arguments of the function are two any types. And the return is Any type.
(: nextString : Any Any -> Any)

#|
Method longestString:
-param: oldString and newString (see above for furthers details).
-return: oldString if nothing changed, or newString, if the newString is longer that the old one..
-time of work: about fifteen minutes.
-difficulties: understanding how to use any type as a string.
|#
(define (nextString oldString newString)  
  (cond
    [(and (not (string? oldString)) (not(string? newString))) #f]
    [(and (string? oldString) (not(string? newString))) oldString]
    [(and (not (string? oldString)) (string? newString)) newString]
    [(>= (string-length oldString) (string-length newString)) oldString]
    [else newString]
    )
  )

;; 14 TESTS CASES
(test (longestString '(34 uuu 90)) => false)
(test (longestString '("34" uuu 90)) => "34")
(test (longestString '(34 "uuu" 90)) => "uuu")
(test (longestString '(34 uuu "90")) => "90")
(test (longestString '()) => false)
(test (longestString '(uu 56 oooo "r" "rRR" "TTT")) => "rRR")
(test (longestString '(uu 56 oooo "r" "rRR" "TTTT")) => "TTTT")
(test (longestString '(uu 56 "oooo" "r" "rRR" "TTT")) => "oooo")
(test (longestString '(uu 56 oooo r rRR TTT)) => false)
(test (longestString '(uu 56 oooo "" rRR TTT)) => "")
(test (longestString '(uu 56 oooo "" v)) => "")
(test (longestString '(uu 56 oooo "1" v)) => "1")
(test (longestString '("")) => "")
(test (longestString '("100")) => "100")


#|///////////////////////////////////////////////////////////////|#
#|QUESTION 2B -> about two hours (including tests and debugging).|#
#|///////////////////////////////////////////////////////////////|#


; check if the list contains '""' (empty string).
; check if needed to send rest or all the list at the beginning.
(: shortestString : (Listof Any) String -> Any)

(define (shortestString myList longestString)
  (: assignString : (Listof Any) String Any -> Any)
  ; local function assignString:
  (define (assignString myList oldString newString)
    (define nextString (if (and
                            (string? newString)
                            (> (string-length oldString) (string-length newString)) 
                            )
                           newString
                           oldString)
      )
    (set! oldString nextString)
    (cond
      [(null? myList) (if(eq? oldString "") #f oldString)]
      [else
       (assignString (rest myList)
                     oldString
                     (first myList)
                     )
       ]
      )   
    )
  (assignString myList longestString (first myList))
  )

(: short&long-lists : (Listof(Listof Any)) -> (Listof Any))

(define (short&long-lists myListOfList)
  ((inst map Any (Listof Any)) minmax myListOfList)
  )

(: minmax : (Listof Any) -> Any)

(define (minmax myInnerList)
  (define max (longestString myInnerList))
  (if (string? max) (list  (shortestString myInnerList max) max) (list))
  
  )

(test (short&long-lists '((any "Benny" 10 "OP" 8) (any Benny OP (2 3)))) => '(("OP" "Benny") ()))
(test (short&long-lists '(("2 5 5" 1 "5gg" L) (v gggg "f") ())) => '(("5gg" "2 5 5") ("f" "f") ()))


;QUESTION 3

(define-type KeyStack
  [EmptyKS]
  [Push Symbol String KeyStack])

(: search-stack : Symbol KeyStack -> Any)

(define (search-stack key keyedStack)
  (cases keyedStack
    [(Push symbol string keyStack) (if (eq? symbol key) string (search-stack key keyStack))] 
    [(EmptyKS) #f]) 
  )

(: pop-stack : KeyStack -> Any)

(define (pop-stack keyedStack)
  (cases keyedStack
    [(Push symbol string keyStack) keyStack]
    [(EmptyKS) #f]) 
  )

(test (EmptyKS) => (EmptyKS))
(test (Push 'b "B" (Push 'a "A" (EmptyKS))) => (Push 'b "B" (Push 'a "A" (EmptyKS))))
(test (Push 'a "AAA" (Push 'b "B" (Push 'a "A" (EmptyKS)))) => (Push 'a "AAA" (Push 'b "B" (Push 'a "A" (EmptyKS)))))
(test (search-stack 'a (Push 'a "AAA" (Push 'b "B" (Push 'a "A" (EmptyKS))))) => "AAA")
(test (search-stack 'b (Push 'a "AAA" (Push 'b "B" (Push 'a "A" (EmptyKS))))) => "B")
(test (search-stack 'c (Push 'a "AAA" (Push 'b "B" (Push 'a "A" (EmptyKS))))) => #f)
(test (pop-stack (Push 'a "AAA" (Push 'b "B" (Push 'a "A" (EmptyKS))))) => (Push 'b "B" (Push 'a "A" (EmptyKS))))
(test (pop-stack (EmptyKS)) => #f)

;QUESTION 4

;These comments should describe what the function
;takes as input, what it outputs, what its purpose is, and how it operates. Do
;not forget to also add your personal remarks on the process in which you
;personally came to realize the above.

 
(: is-odd? : Natural -> Boolean)
;; << Add your comments here>>
;; << Add your comments here>>
(define (is-odd? x)
  (if (zero? x)false
      (is-even? (- x 1))))
(: is-even? : Natural -> Boolean)
;; << Add your comments here>>
;; << Add your comments here>>
(define (is-even? x)
  (if (zero? x)
      true
      (is-odd? (- x 1))))
;; tests --- is-odd?/is-even?
(test (not (is-odd? 12)))
(test (is-even? 12))
(test (not (is-odd? 0)))
(test (is-even? 0))
(test (is-odd? 1))
(test (not (is-even? 1)))
(: every? : (All (A) (A -> Boolean) (Listof A) -> Boolean))
;; See explanation about the All syntax at the end of the file...
;; << Add your comments here>>
;; << Add your comments here>>
(define (every? pred lst)
  (or (null? lst)
      (and (pred (first lst))
           (every? pred (rest lst)))))
;; An example for the usefulness of this polymorphic function
(: all-even? : (Listof Natural) -> Boolean)
;; << Add your comments here>>
;; << Add your comments here>>
(define (all-even? lst)
  (every? is-even? lst))
;; tests
(test (all-even? null))
(test (all-even? (list 0)))
(test (all-even? (list 2 4 6 8)))
(test (not (all-even? (list 1 3 5 7))))
(test (not (all-even? (list 1))))
(test (not (all-even? (list 2 4 1 6))))(: every2? : (All (A B) (A -> Boolean) (B -> Boolean) (Listof A) (Listof B) ->
                                                         Boolean))
;; << Add your comments here>>
;; << Add your comments here>>
(define (every2? pred1 pred2 lst1 lst2)
  (or (null? lst1) ;; both lists assumed to be of same length
      (and (pred1 (first lst1))
           (pred2 (first lst2))
           (every2? pred1 pred2 (rest lst1) (rest lst2)))))
